-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.alumnos
(
    id_alumno uuid NOT NULL DEFAULT uuid_generate_v4(),
    nombre character varying(80) COLLATE pg_catalog."default" NOT NULL,
    apellido character varying(80) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    telefono character varying(45) COLLATE pg_catalog."default" NOT NULL,
    id_facultad uuid NOT NULL,
    CONSTRAINT alumnos_pkey PRIMARY KEY (id_alumno)
);

CREATE TABLE IF NOT EXISTS public.cursos
(
    id_curso uuid NOT NULL DEFAULT uuid_generate_v4(),
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    descripcion character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT cursos_pkey PRIMARY KEY (id_curso),
    CONSTRAINT ct_unique_nombre UNIQUE (nombre)
);

CREATE TABLE IF NOT EXISTS public.facultades
(
    id_facultad uuid NOT NULL DEFAULT uuid_generate_v4(),
    telefono character varying(45) COLLATE pg_catalog."default" NOT NULL,
    web character varying(100) COLLATE pg_catalog."default" NOT NULL,
    codusuario uuid,
    id_tipo uuid,
    CONSTRAINT academias_pkey PRIMARY KEY (id_facultad),
    CONSTRAINT ct_unique_id_tipo UNIQUE (id_tipo)
);

CREATE TABLE IF NOT EXISTS public.notas
(
    id_nota uuid NOT NULL DEFAULT uuid_generate_v4(),
    nota double precision NOT NULL,
    id_alumno uuid NOT NULL,
    id_curso uuid NOT NULL,
    CONSTRAINT notas_pkey PRIMARY KEY (id_nota)
);

CREATE TABLE IF NOT EXISTS public.profesores
(
    id_profesor uuid NOT NULL DEFAULT uuid_generate_v4(),
    nombre character varying(45) COLLATE pg_catalog."default" NOT NULL,
    apellido character varying(45) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    telefono character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT profesores_pkey PRIMARY KEY (id_profesor),
    CONSTRAINT ct_unique_profesores_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.profesores_x_cursos
(
    id_profesor_x_curso uuid NOT NULL DEFAULT uuid_generate_v4(),
    id_profesor uuid NOT NULL,
    id_curso uuid NOT NULL,
    CONSTRAINT profesores_x_cursos_pkey PRIMARY KEY (id_profesor_x_curso)
);

CREATE TABLE IF NOT EXISTS public.profesores_x_facultades
(
    id_profesor_x_facultad uuid NOT NULL DEFAULT uuid_generate_v4(),
    id_profesor uuid NOT NULL,
    id_facultad uuid NOT NULL,
    CONSTRAINT profesores_x_facultades_pkey PRIMARY KEY (id_profesor_x_facultad)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id_rol uuid NOT NULL DEFAULT uuid_generate_v4(),
    rol character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id_rol),
    CONSTRAINT ct_unique_rol UNIQUE (rol)
);

CREATE TABLE IF NOT EXISTS public.tipos_de_facultades
(
    id_tipo uuid NOT NULL DEFAULT uuid_generate_v4(),
    facultad character varying(45) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tipo_facultad_pkey PRIMARY KEY (id_tipo),
    CONSTRAINT ct_unique_facultad UNIQUE (facultad)
);

CREATE TABLE IF NOT EXISTS public.usuarios
(
    codusuario uuid NOT NULL DEFAULT uuid_generate_v4(),
    nombre character varying(18) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    estado boolean,
    id_rol uuid NOT NULL,
    CONSTRAINT usuarios_pkey PRIMARY KEY (codusuario),
    CONSTRAINT ct_unique_email UNIQUE (email)
);

ALTER TABLE IF EXISTS public.alumnos
    ADD CONSTRAINT alumnos_id_facultad_fkey FOREIGN KEY (id_facultad)
    REFERENCES public.facultades (id_facultad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.facultades
    ADD CONSTRAINT facultades_codusuario_fkey FOREIGN KEY (codusuario)
    REFERENCES public.usuarios (codusuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.facultades
    ADD CONSTRAINT facultades_id_tipo_fkey FOREIGN KEY (id_tipo)
    REFERENCES public.tipos_de_facultades (id_tipo) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS ct_unique_id_tipo
    ON public.facultades(id_tipo);


ALTER TABLE IF EXISTS public.notas
    ADD CONSTRAINT notas_id_alumno_fkey FOREIGN KEY (id_alumno)
    REFERENCES public.alumnos (id_alumno) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notas
    ADD CONSTRAINT notas_id_curso_fkey FOREIGN KEY (id_curso)
    REFERENCES public.cursos (id_curso) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.profesores_x_cursos
    ADD CONSTRAINT profesores_x_cursos_id_curso_fkey FOREIGN KEY (id_curso)
    REFERENCES public.cursos (id_curso) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.profesores_x_cursos
    ADD CONSTRAINT profesores_x_cursos_id_profesor_fkey FOREIGN KEY (id_profesor)
    REFERENCES public.profesores (id_profesor) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.profesores_x_facultades
    ADD CONSTRAINT profesores_x_facultades_id_facultad_fkey FOREIGN KEY (id_facultad)
    REFERENCES public.facultades (id_facultad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.profesores_x_facultades
    ADD CONSTRAINT profesores_x_facultades_id_profesor_fkey FOREIGN KEY (id_profesor)
    REFERENCES public.profesores (id_profesor) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.usuarios
    ADD CONSTRAINT usuarios_id_rol_fkey FOREIGN KEY (id_rol)
    REFERENCES public.roles (id_rol) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;